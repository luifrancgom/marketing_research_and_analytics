---
title: "Reducing Data Complexity"
subtitle: Session 1
author:
  - name: 
      given: Luis F.
      family: GÃ³mez L.
    orcid: 0000-0002-2877-9015
    email: luis.gomezl@unimilitar.edu.co
    affiliations:
      - name: Distance Learning Faculty
toc: true
toc-depth: 1
slide-level: 2
format:
  presentation-umng-revealjs:
    logo-vertical-strip: ../000_logos/logo-white-vertical.png 
    embed-resources: true
    mermaid-format: png
    reference-location: document
date: last-modified
date-format: "D MMMM, YYYY"
knitr: 
  opts_chunk: 
    echo: true
    warning: false
    fig.align: center
    out.width: 85%
lang: en
bibliography: ../000_references/marketing_research_and_analytics.bib
csl: ../000_references/apa-7.csl
editor: source
---

```{r}
#| echo: false
#| label: libraries

library(tidyverse)
library(skimr)
library(corrr)
library(tidymodels)
library(ggforce)
library(imager)
```

```{r}
#| label: palette
#| echo: false

umng_palette <- c(
  "#043074",
  "#fdc600",
  "#0d5e30",
  "#ee2a24",
  "#fc6700",
  "#00b3f0",
  "#6e3c1a",
  "#f8941c",
  "#8e44ad",
  "#2c3e50",
  "#16a085",
  "#c0392b",
  "#e91e63"
)
```

# Please Read Me

##

-   This presentation is based on [@chapman_r_2019, Chapter 8]

## 

- **Purpose**

    - Apply data complexity reduction by using the principal component analysis technique

# Consumer brand perception survey

## {.smaller}

-   On a scale from 1 to 10, where 1 is least and 10 is most, how `<perceptual adjective>` is `<brand>`?

-   100 respondents rate 10 brands on 9 perceptual adjectives

    -   **perform**: has strong performance $(1, 2, \ldots, 10)$
    -   **leader**: is a leader in the field $(1, 2, \ldots, 10)$
    -   **latest**: has the latest products $(1, 2, \ldots, 10)$
    -   **fun**: is fun $(1, 2, \ldots, 10)$
    -   **serious**: is serious $(1, 2, \ldots, 10)$
    -   **bargain**: products are a bargain $(1, 2, \ldots, 10)$
    -   **value**: products are a good value $(1, 2, \ldots, 10)$
    -   **trendy**: is trendy $(1, 2, \ldots, 10)$
    -   **rebuy**: I would buy from `<brand>` again $(1, 2, \ldots, 10)$
    -   **brand**: coffee brand rated by a consumer $(a, b, \ldots, j)$

##

-   Import data

```{r}
consumer_brand <- read_csv("http://goo.gl/IQl8nc")
consumer_brand |> head(n = 5)
```

##

-   Transform data

```{r}
consumer_brand_scale <- consumer_brand |> 
  mutate(across(perform:rebuy, 
                .fns = \(x) scale(x = x,
                                  center = TRUE,
                                  scale = TRUE)[,1]))
consumer_brand_scale |> head()
```

##

-   Summarize data

    -   Ups the table is really big!!! Try it in your console to see the complete table

```{r}
#| eval: false
consumer_brand_scale |> skim()
```

## {.smaller}

-   Correlation matrices

    -   Pearson correlation coefficients for samples in a tibble

```{r}
correlation_matrix <- consumer_brand_scale |> 
  select(perform:rebuy) |> 
  corrr::correlate(use = "pairwise.complete.obs", # There are NA values
                   method = "pearson",
                   diagonal = NA)
correlation_matrix # Ups!!! The tibble is wide. Check out the tibble in your console
```

## {.smaller}

-   Correlation matrices

```{r}
#| label: fig-visualizing-correlation-matrix
#| fig-cap: "Visualizing a correlation matrix"

correlation_matrix |> 
  autoplot(method = "HC", # Hierarchical clustering: More details in Chapter 11 
           triangular = "lower")
```

##

-   Mean ratings by brand

```{r}
brand_mean <- consumer_brand_scale |> 
  group_by(brand) |> 
  summarise(across(everything(), .fns = mean))
brand_mean
```

## {.smaller}

-   Mean ratings by brand

```{r}
brand_mean_longer <- brand_mean |> 
  pivot_longer(cols = perform:rebuy,
               names_to = "perceptual_adjectives",
               values_to = "value_mean") |> 
  mutate(brand = fct_reorder(.f = brand, .x = value_mean),
         perceptual_adjectives = fct_reorder(.f = perceptual_adjectives, .x = value_mean))
brand_mean_longer
```

## {.smaller}

```{r}
#| label: fig-heat-map-mean-ratings-by-brand
#| fig-cap: "Heat map mean ratings by brand"

library(tidyheatmaps)
tidyheatmap(df = brand_mean_longer, 
            rows = brand, columns = perceptual_adjectives, values = value_mean,
            cluster_rows = TRUE, cluster_cols = TRUE,
            clustering_method = "complete", # See ?hclust and chapter 11
            display_numbers = TRUE, border_color = "black", fontsize = 12)
```

## {.smaller}

-   Principal component analysis (PCA) and perceptual maps

    -   PCA reduced example

```{r}
set.seed(seed = 1234)
consumer_brand_sample <- consumer_brand |>
  slice_sample(n = 1, by = brand) |> 
  select(brand, perform, leader)
consumer_brand_sample
```

##

-   Principal component analysis (PCA) and perceptual maps

```{r}
#| echo: false
#| label: fig-visualizing-original-data
#| fig-cap: "Visualizing original data"

mean_leader <- mean(consumer_brand_sample$leader)
mean_perform <- mean(consumer_brand_sample$perform)

consumer_brand_sample |> 
  ggplot() + 
  geom_vline(xintercept = mean_leader,
             color = "black") +
  geom_hline(yintercept = mean_perform,
             color = "black") +
  geom_point(aes(x = leader, y = perform, color = brand)) +
  geom_point(data = tibble(x = mean(consumer_brand_sample$leader),
                           y = mean(consumer_brand_sample$perform)),
             aes(x = x, y = y), color = "#E31A1C") +
  scale_x_continuous(breaks = 0:8, limits = c(0, 8)) +
  scale_y_continuous(breaks = 0:11, limits = c(0, 11)) +
  labs(title = "Calculate means") +
  theme(legend.position = "right", 
        aspect.ratio = 1)
```

##

-   Principal component analysis (PCA) and perceptual maps

```{r}
#| echo: false
#| label: fig-centering-data-using-the-mean
#| fig-cap: "Centering data using the mean"

consumer_brand_sample_center <- consumer_brand_sample |>
  mutate(perform = perform - mean_perform,
         leader = leader - mean_leader) 

consumer_brand_sample_center |> 
  ggplot() + 
  geom_vline(xintercept = 0,
             color = "black") +
  geom_hline(yintercept = 0,
             color = "black") +
  geom_point(aes(x = leader, y = perform, color = brand)) +
  geom_point(data = tibble(x = 0, y = 0),
             aes(x = x, y = y), color = "#E31A1C") +
  labs(title = "Center data") +
  theme(legend.position = "right", 
        aspect.ratio = 1)
```

##

-   Principal component analysis (PCA) and perceptual maps

```{r}
#| echo: false
#| label: fig-scaling-data-using-the-standard-deviation
#| fig-cap: "Scaling data using the standard deviation"

sd_leader <- sd(consumer_brand_sample$leader)
sd_perform <- sd(consumer_brand_sample$perform)

consumer_brand_sample_center_scale <- consumer_brand_sample_center |>
  mutate(perform = perform / sd_perform,
         leader = leader / sd_leader)

consumer_brand_sample_center_scale |> 
  ggplot() + 
  geom_vline(xintercept = 0,
             color = "black") +
  geom_hline(yintercept = 0,
             color = "black") +
  geom_point(aes(x = leader, y = perform, color = brand)) +
  geom_point(data = tibble(x = 0, y = 0),
             aes(x = x, y = y), color = "#E31A1C") +
  labs(title = "Calculate standard deviations and scale data") +
  theme(legend.position = "right", 
        aspect.ratio = 1)
```

##

-   Principal component analysis (PCA) and perceptual maps

```{r}
#| echo: false
#| label: fig-a-line-by-performing-an-orthogonal-regression
#| fig-cap: "Fitting a line by performing an orthogonal regression"

# Fit 
v <- prcomp(as.matrix(select(consumer_brand_sample_center_scale, -brand)),
            center = TRUE, scale. = TRUE) |> 
  _$rotation
beta <- v[2,1] / v[1,1]

# Find fit data
## perform = beta*leader
### perform - perform1 = -beta(leader - leader1)
### perform = -beta*(leader - leader1) + perform1
#### beta*leader_end = -beta*(leader_end - leader1) + perform1
#### beta*leader_end = -beta*leader_end + beta*leader1 + perform1
#### 2beta*leader_end = beta*leader1 + perform1
#### leader_end = beta*leader1 + perform1 / 2beta
##### perform_end = beta*(beta*leader1 + perform1 / 2beta) 
##### perform_end = beta*leader1 + perform1 / 2 
consumer_brand_sample_center_scale_fit <- consumer_brand_sample_center_scale |> 
  mutate(perform_end = (beta*leader + perform) / 2,
         leader_end = (beta*leader + perform) / (2*beta))

consumer_brand_sample_center_scale_fit |> 
  ggplot(aes(x = leader, y = perform)) + 
  geom_vline(xintercept = 0,
             color = "black") +
  geom_hline(yintercept = 0,
             color = "black") +
  geom_abline(slope = beta, intercept = 0, color = "#18BC9C") +
  geom_point(aes(color = brand)) +
  geom_segment(aes(xend = leader_end, yend = perform_end),
               color = "#CCBE93") +
  geom_point(data = tibble(x = 0, y = 0),
             aes(x = x, y = y), color = "#E31A1C") +
  labs(title = "Fit orthogonal line") +
  theme(legend.position = "right", 
        aspect.ratio = 1)
```

##

-   Principal component analysis (PCA) and perceptual maps

```{r}
#| echo: false
#| label: fig-find-a-line-orthoghonal-to-the-fitted-line
#| fig-cap: "Find a line orthogonal to the fitted line"

consumer_brand_sample_center_scale_fit |> 
  ggplot(aes(x = leader, y = perform)) + 
  geom_vline(xintercept = 0,
             color = "black") +
  geom_hline(yintercept = 0,
             color = "black") +
  geom_abline(slope = beta, intercept = 0, color = "#18BC9C") +
  geom_abline(slope = -beta, intercept = 0, color = "#18BC9C") +
  geom_point(aes(color = brand)) +
  geom_segment(aes(xend = leader_end, yend = perform_end),
               color = "#CCBE93") +
  geom_point(data = tibble(x = 0, y = 0),
             aes(x = x, y = y), color = "#E31A1C") +
  labs(title = "Fit orthogonal line") +
  theme(legend.position = "right", 
        aspect.ratio = 1)
```

##

-   Principal component analysis (PCA) and perceptual maps

```{r}
#| echo: false
#| label: fig-find-the-orthoghonal-distances-between-the-points-and-the-new-line
#| fig-cap: "Find the orthogonal distances between the points and the new line"

#### leader_end2 = -beta*leader1 + perform1 / 2*-beta
##### perform_end2 = -beta*(-beta*leader1 + perform1 / 2*-beta) 
##### perform_end2 = -beta*leader1 + perform1 / 2
consumer_brand_sample_center_scale_fit <- consumer_brand_sample_center_scale_fit |> 
  mutate(perform_end2 = ((-beta)*leader + perform) / 2,
         leader_end2 = ((-beta)*leader + perform) / (2*(-beta)))

consumer_brand_sample_center_scale_fit |> 
  ggplot(aes(x = leader, y = perform)) + 
  geom_vline(xintercept = 0,
             color = "black") +
  geom_hline(yintercept = 0,
             color = "black") +
  geom_abline(slope = beta, intercept = 0, color = "#18BC9C") +
  geom_abline(slope = -beta, intercept = 0, color = "#18BC9C") +
  geom_point(aes(color = brand)) +
  geom_segment(aes(xend = leader_end, yend = perform_end),
               color = "#CCBE93") +
  geom_segment(aes(xend = leader_end2, yend = perform_end2),
               color = "#CCBE93") +
  geom_point(data = tibble(x = 0, y = 0),
             aes(x = x, y = y), color = "#E31A1C") +
  labs(title = "Find the orthogonal distances to the new line") +
  theme(legend.position = "right", 
        aspect.ratio = 1)
```

##

-   Principal component analysis (PCA) and perceptual maps

```{r}
#| echo: false
#| label: fig-project-the-points-onto-each-line
#| fig-cap: "Project the points onto each line"

# Project the points
consumer_brand_sample_center_scale_fit |> 
  ggplot() + 
  geom_vline(xintercept = 0,
             color = "black") +
  geom_hline(yintercept = 0,
             color = "black") +
  geom_abline(slope = beta, intercept = 0, color = "#18BC9C") +
  geom_abline(slope = -beta, intercept = 0, color = "#18BC9C") +
  geom_point(aes(x = leader_end, y = perform_end, color = brand)) +
  geom_point(aes(x = leader_end2, y = perform_end2, color = brand)) +
  labs(x = "leader",
       y = "perform",
       title = "Proyected points") +
  theme(legend.position = "right", 
        aspect.ratio = 1)
```

##

-   Principal component analysis (PCA) and perceptual maps

```{r}
#| echo: false
#| label: fig-rotate-the-fitted-line-and-the-projected-points
#| fig-cap: Rotate the fitted line and the projected points around $(0,0)$

# Rotate the points
## arc-tangent
angle_radians <- atan(beta)

consumer_brand_sample_center_scale_fit_rotation <- consumer_brand_sample_center_scale_fit |>
  mutate(perform_rotation = 0,
         leader_rotation = cos(angle_radians)*leader_end + sin(angle_radians)*perform_end,
         leader_rotation2 = 0,
         perform_rotation2 = -sin(angle_radians)*leader_end2 + cos(angle_radians)*perform_end2) |> 
  # Possible clusters
  mutate(cluster = case_when(
    leader_rotation <= 0 ~ "Cluster 1",
    leader_rotation > 0 ~ "Cluster 2", 
    .default = NULL))

consumer_brand_sample_center_scale_fit_rotation |>
  ggplot() +
  geom_vline(xintercept = 0, color = "#18BC9C") +
  geom_hline(yintercept = 0, color = "#18BC9C") +
  geom_point(aes(x = leader_rotation2, y = perform_rotation2, color = brand)) +
  geom_point(aes(x = leader_rotation, y = perform_rotation, color = brand)) +
  scale_x_continuous(limits = c(-2,2)) +
  scale_y_continuous(limits = c(-2,2)) +
  labs(x = "leader",
       y = "perform",
       title = "Rotated points") +
  theme(legend.position = "right", 
        aspect.ratio = 1)
```

##

-   Principal component analysis (PCA) and perceptual maps

```{r}
#| echo: false
#| label: fig-fix-the-new-points-based-on-the-projected-points
#| fig-cap: "Fix the new points based on the projected points"

consumer_brand_sample_center_scale_fit_rotation |>
  ggplot() +
  geom_vline(xintercept = 0, color = "#18BC9C") +
  geom_hline(yintercept = 0, color = "#18BC9C") +
  geom_segment(aes(x = leader_rotation, xend = leader_rotation, 
                   y = 0, yend = perform_rotation2),
               color = "#CCBE93") +
  geom_segment(aes(x = 0, xend = leader_rotation,
                   y = perform_rotation2, yend = perform_rotation2),
               color = "#CCBE93") +
  geom_point(aes(x = leader_rotation2, y = perform_rotation2), color = "black") +
  geom_point(aes(x = leader_rotation, y = perform_rotation), color = "black") +
  geom_point(aes(x = leader_rotation, y = perform_rotation2, color = brand)) +
  scale_x_continuous(limits = c(-2,2)) +
  scale_y_continuous(limits = c(-2,2)) +
  labs(x = "leader",
       y = "perform",
       title = "New points based on the rotated points") +
  theme(legend.position = "right", 
        aspect.ratio = 1)
```

##

-   Principal component analysis (PCA) and perceptual maps

```{r}
#| echo: false
#| label: fig-apply-data-complexity-reduction
#| fig-cap: "Apply data complexity reduction by focusing on the horizontal axis"

consumer_brand_sample_center_scale_fit_rotation |>
  ggplot(aes(x = leader_rotation, y = perform_rotation)) +
  geom_mark_hull(aes(fill = cluster, label = cluster),
                 show.legend = FALSE) +
  geom_vline(xintercept = 0, color = "#18BC9C") +
  geom_hline(yintercept = 0, color = "#18BC9C") +
  geom_point(aes(color = brand)) +
  scale_x_continuous(limits = c(-2,2)) +
  scale_y_continuous(limits = c(-1,1)) +
  labs(x = "leader",
       y = "perform",
       title = "Data reduction focusing on the horizontal axis") +
  theme(legend.position = "right", 
        aspect.ratio = 1)
```

##

-   Principal component analysis (PCA) and perceptual maps

```{r}
#| echo: false
#| label: fig-recover-the-data-that-was-reduced
#| fig-cap: "Recover the data that was reduced when focusing in the horizontal axis"

# Recover reduced data
consumer_brand_sample_center_scale_fit_rotation_recover <- consumer_brand_sample_center_scale_fit_rotation |>  
  mutate(perform_recover = (perform_end)*sd_perform + mean_perform,
         leader_recover = (leader_end)*sd_leader + mean_leader)

consumer_brand_sample_center_scale_fit_rotation_recover |>
  ggplot(aes(x = leader_recover, y = perform_recover)) +
  # geom_vline(xintercept = 0, color = "#18BC9C") +
  # geom_hline(yintercept = 0, color = "#18BC9C") +
  geom_point(aes(color = "Recover data")) +
  geom_point(data = consumer_brand_sample,
             aes(x = leader, y = perform, color = "Original data")) +
  scale_x_continuous(breaks = 0:8, limits = c(0, 8)) +
  scale_y_continuous(breaks = 0:11, limits = c(0, 11)) +
  labs(x = "leader",
       y = "perform",
       title = "Recovered data vs Original data") +
  theme(legend.position = "bottom",
        legend.title = element_blank())
```

# Understanding the reduction of data complexity

##

-   Principal component analysis (PCA) and perceptual maps

```{r}
#| echo: false
#| label: fig-using-an-image-to-understand-data-complexity-reduction
#| fig-cap: "Using an image to understand data complexity reduction"

boat_gray <- load.image(file = "../000_images/008_boat_gray_512_x_512.tiff")
plot(boat_gray)
```

## {.smaller}

-   Principal component analysis (PCA) and perceptual maps

    -   Represent and image as data

        -   `x,y`: position of a point in a cartesian plane $(x,y)$
        -   `value`: a gray scale where $0$ is white, $1$ is black and $(0,1)$ is an intermediate color between white and black

```{r}
#| echo: false
boat_gray_long <- boat_gray |> 
  as.data.frame() |> 
  as_tibble()
boat_gray_long
```

##

-   Principal component analysis (PCA) and perceptual maps

    -   Prepare data for PCA

```{r}
#| echo: false
boat_gray_wider <- boat_gray_long |>
  pivot_wider(id_cols = x, 
              names_from = y, 
              values_from = value)
boat_gray_wider
```

##

-   Principal component analysis (PCA) and perceptual maps

```{r}
#| echo: false
#| label: fig-data-complexity-reduction
#| fig-cap: "Data complexity reduction example"

boat_gray_wider_pca <- boat_gray_wider |> 
  select(-x) |> 
  prcomp(retx = TRUE, center = TRUE, scale. = TRUE)

n_pc <- c(1, 5, 10, 50, 100, 500)
  
pca_tidy_reconstruction <- tibble(pc = n_pc) |> 
  mutate(x_hat = map(.x = n_pc, 
                     .f = ~ boat_gray_wider_pca$x[, 1:.x] %*% 
                            t(boat_gray_wider_pca$rotation[, 1:.x])),
         x_hat = map(.x = x_hat,
                     .f = ~ scale(x = .x, 
                                  center = FALSE, 
                                  scale = 1/boat_gray_wider_pca$scale)),
         x_hat = map(.x = x_hat,
                     .f = ~ scale(x = .x, 
                                  center = -boat_gray_wider_pca$center, 
                                  scale = FALSE)),
         x_hat = map(.x = x_hat, 
                     .f = ~ as_tibble(.x)),
         x_hat = map(.x = x_hat, 
                     .f = ~ bind_cols(select(boat_gray_wider, x), .x)),
         x_hat = map(.x = x_hat, 
                     .f = ~ pivot_longer(.x, 
                                         cols = -x,
                                         names_to = "y",
                                         values_to = "value",
                                         names_transform = list(y = as.integer)))) |> 
  mutate(pc_label = str_glue("Number of components: {pc}"),
         .after = pc) |>
  mutate(pc_label = fct_reorder(.f = pc_label, .x = pc)) |>  
  unnest(x_hat)

pca_tidy_reconstruction |> 
  ggplot(aes(x = x, y = y)) + 
  geom_raster(aes(fill = value)) +
  scale_y_reverse() +
  scale_fill_gradient(low = "black", high = "white") +
  facet_wrap(facets = vars(pc), 
             nrow = 2, ncol = 3) +
  theme(legend.position = "none",
        aspect.ratio = 1)
```

# Consumer brand perception survey

##

-   Principal component analysis (PCA) and perceptual maps

    -   Applying to the reduced example

```{r}
consumer_brand_sample_matrix <- consumer_brand_sample |> 
  select(-brand) |>
  as.matrix()
consumer_brand_sample_matrix |> head()
```

##

-   Principal component analysis (PCA) and perceptual maps

    -   `prcomp` output from R

```{r}
consumer_brand_sample_matrix_pca <- consumer_brand_sample_matrix |> 
  prcomp(center = TRUE, scale. = TRUE)
consumer_brand_sample_matrix_pca
```

##

-   Principal component analysis (PCA) and perceptual maps

    -   Structure of `prcomp`from R

```{r}
consumer_brand_sample_matrix_pca |> str()
```

##

-   Principal component analysis (PCA) and perceptual maps

    -   Extracting scores: principle components space

```{r}
scores <- consumer_brand_sample_matrix_pca$x
scores
```

## 

-   Principal component analysis (PCA) and perceptual maps

    -   Extracting loadings: map from principle components space back into the original space


```{r}
loadings <- consumer_brand_sample_matrix_pca$rotation
loadings
```

## {.smaller}

-   Principal component analysis (PCA) and perceptual maps

    -   Extracting loadings: map from principle components space back into the original space

```{r}
consumer_brand_sample_matrix_center_scale <- consumer_brand_sample_matrix |> 
  scale(center = TRUE, scale = TRUE)
consumer_brand_sample_matrix_center_scale
```

## {.smaller}

-   Principal component analysis (PCA) and perceptual maps

    -   Using matrix multiplication, `%*%`, the original centered and scaled data, $X_{c, s}$, and the loadings, $L$, `loadings` to obtain the scores, $S$

$$S = X_{c, s}L$$

\tiny

```{r}
consumer_brand_sample_matrix_center_scale %*% loadings
```

## {.smaller}

-   Principal component analysis (PCA) and perceptual maps

    -   Recovering original centered and scaled data, $X$, using loadings, $L$,[^1] and scores, $S$

[^1]: $L$ is an orthogonal matrix, which means that $L$ is a real square matrix such that $L^tL = LL^t = I$ where $I$ is the identity matrix.

$$SL^t = X_{c, s}LL^t = X_{c, s}I= X_{c, s}$$

```{r}
(scores %*% t(loadings)) |> set_colnames(c("perform", "leader"))
```

## {.smaller}

-   Principal component analysis (PCA) and perceptual maps

    -   Reconstructing original centered and scaled data using the first principal component, $X_{c, s, p_1}$

$$S_{p_1}L_{p_1}^t = X_{c, s, p_1}$$ \tiny

```{r}
scores[, 1] %*% t(loadings[, 1])
```

## {.smaller}

-   Principal component analysis (PCA) and perceptual maps

    -   Reconstructing original centered data using the first principal component, $X_{c, p_1}$

```{r}
scores[, 1] %*% t(loadings[, 1]) |> 
  scale(center = FALSE, scale = 1/consumer_brand_sample_matrix_pca$scale)
```

## {.smaller}

-   Principal component analysis (PCA) and perceptual maps

    -   Reconstructing original data using the first principal component, $X_{p_1}$

```{r}
scores[, 1] %*% t(loadings[, 1]) |> 
  scale(center = FALSE, scale = 1/consumer_brand_sample_matrix_pca$scale) |> 
  scale(center = -consumer_brand_sample_matrix_pca$center, scale = FALSE)
```

##

-   Principal component analysis (PCA) and perceptual maps

    -   Eingevalues, in this case `variance`, represent the variance explained by each principal component

```{r}
eigenvalues <- consumer_brand_sample_matrix_pca |> 
  tidy(matrix = "eigenvalues") |> 
  mutate(variance = std.dev^2, .after = std.dev)
eigenvalues
```

##

```{r}
#| label: fig-variance-explained-by-each-principal-component
#| fig-cap: "Variance explained by each principal component"

library(ggbiplot)
consumer_brand_sample_matrix_pca |> 
  ggscreeplot() +
  scale_x_continuous(breaks = 1:2)
```

##

-   Principal component analysis (PCA) and perceptual maps

    -   A **biplot** represents visually the scores of the first, x-axis, and second, y-axis, of the principal components and the corresponding loadings both **scaled by a factor**[^2]

    -   In the case of principal component analysis there are many different ways to produce a biplot

        -   For the differents ways to build a biplot check out [Positioning the arrows on a PCA biplot](https://stats.stackexchange.com/questions/141085/positioning-the-arrows-on-a-pca-biplot)

[^2]: For specific details check out `?stats:::biplot.prcomp`, `?ggbiplot::ggbiplot` and `?ggbiplot::get_SVD`

##

```{r}
#| label: fig-biplot-using-the-package-ggbiplot 
#| fig-cap: Building a biplot using the package `ggbiplot`

ggbiplot(pcobj = consumer_brand_sample_matrix_pca,
         groups = consumer_brand_sample$brand,
         scale = 1, pc.biplot = FALSE) +
  labs(color = "Brands")
```

##

\tiny

```{r}
#| label: fig-biplot-for-all-the-consumer-brand-perception-survey 
#| fig-cap: Bibplot for all the consumer brand perception survey

consumer_brand_pca <- consumer_brand |>
  select(-brand) |> 
  prcomp(center = TRUE, scale. = TRUE)
consumer_brand_pca |> 
  ggbiplot(groups = consumer_brand$brand, scale = 1, pc.biplot = FALSE)
```

## {.smaller}

-   A biplot is a generalization of a scatterplot of 2 variables for the case of many variables [@greenacre_biplots_2010, pp. 9]

-   Variables of the brands that are grouped together are positively correlated to each other

    -   For example `serious`, `leader` and `perform` or `trendy` and `latest`

-   Variables of the brands that are displayed to the opposite sides of the biplot origin are negatively correlated to each other

    -   For example `fun` in relation to `serious`, `leader` and `perform` or `trendy` and `latest` in relation to `value` and `bargain`

## {.smaller}

-   A biplot is an **approximated** representation of a data table ordered by rows which represents some observations and columns which represents some variables

    -   By the term **approximated** it means that the representation is not exact

    -   In our case the last biplot was used to represent the data table `consumer_brand_sample` by reducing its complexity

-   In a biplot the distance between points represent some measure of similarity

    -   In the case of the last biplot for example brand `g`, that is colored in blue, tend to be spatially grouped in the plot

# Acknowledgments

##

-   To my family that supports me

-   To the taxpayers of Colombia and the [**UMNG students**](https://www.umng.edu.co/estudiante) who pay my salary

-   To the [**Business Science**](https://www.business-science.io/) and [**R4DS Online Learning**](https://www.rfordatasci.com/) communities where I learn [**R**](https://www.r-project.org/about.html) and [**$\pi$-thon**](https://www.python.org/about/)

-   To the [**R Core Team**](https://www.r-project.org/contributors.html), the creators of [**RStudio IDE**](https://posit.co/products/open-source/rstudio/), [**Quarto**](https://quarto.org/) and the authors and maintainers of the packages [**tidyverse**](https://CRAN.R-project.org/package=tidyverse), [**skimr**](https://CRAN.R-project.org/package=skimr), [**corrr**](https://CRAN.R-project.org/package=corrr), [**tidymodels**](https://CRAN.R-project.org/package=tidymodels), [**ggforce**](https://CRAN.R-project.org/package=ggforce),
[**imager**](https://CRAN.R-project.org/package=imager),
[**tidyheatmaps**](https://CRAN.R-project.org/package=tidyheatmaps),
[**ggbiplot**](https://CRAN.R-project.org/package=ggbiplot) and [**tinytex**](https://CRAN.R-project.org/package=tinytex) for allowing me to access these tools without paying for a license

# References {.allowframebreaks}

