---
title: "Marketing report part 2"
date: 2024-11-09
author: 
  - Luis Francisco GÃ³mez  
  - Sara Perez
format: 
  html:
    toc: true
    code-fold: true
    number-sections: true
    embed-resources: true
editor: visual
---

```{r }
#| label: libraries
#| echo: false
#| message: false

# Check out https://quarto.org/docs/output-formats/html-basics.html
## to get started with html documents

# Check out https://quarto.org/docs/reference/formats/html.html
## to examine all the possible options for html documents

# You can control the execution options of each code 
# chunk
## For more information check out 
### https://quarto.org/docs/computations/execution-options.html
# You can include the libraries you are going to use here
library(sweep)
library(tidyverse)
library(scales)
library(DT)
library(tidymodels)
```

# Exploring data, visualizing it and applying statistical tests

## Introduction

Once your group has finish filling all the sections, add some text here describing the principal findings. Be straightforward and concise taking into account that it is an executive report.

## Import data

Add some text if your group consider to be necessary.

```{r}
# Import the data from the sweep package
bike_sales <- bike_sales

# Transforming data
bike_sales <- bike_sales |> 
  mutate(order.id = factor(x = order.id, 
                           ordered = FALSE),
         order.line = factor(x = order.id, 
                             ordered = TRUE),
         customer.id = factor(x = customer.id, 
                              ordered = FALSE),
         bikeshop.name = factor(x = bikeshop.name, 
                                ordered = FALSE),
         bikeshop.city = factor(x = bikeshop.city, 
                                ordered = FALSE),
         product.id = factor(x = product.id, 
                                ordered = FALSE),
         category.primary = factor(x = category.primary , 
                                   ordered = FALSE),
         category.secondary = factor(x = category.secondary, 
                                     ordered = FALSE),
         frame = factor(x = frame, 
                        ordered = FALSE))
```

## Relation between continuous variables

Add some text pointing out the principal findings as a result of generating the following scatterplots:

```{r}
# You can use plot and legend from base R 
# or ggplot, geom_point and labs from the tidyverse
## If you use ggplot, geom_point and labs remember to load the 
## the library in the first code chunk: library(tidyverse)
### For more information about using geom_point and some examples check out
#### https://ggplot2.tidyverse.org/reference/geom_point.html

## Prepare data ----
bike_sales_p_q_frame <- bike_sales |> 
  select(price, quantity, frame)

bike_sales_p_q_frame |> 
  ggplot() + 
  geom_point(aes(x = price, y = quantity,
                 color = frame)) +
  scale_x_continuous(labels = label_dollar()) +
  labs(x = "Price (US Dollars)",
       y = "Quantity (units)",
       color = "Frame",
       title = "Relation between price and units sale")
```

Generate the same scatter plot but applying a logarithmic transformation to `price` and `quantity`

```{r}
# If you use base R you can use the argument
# log ="xy" in plot
# If you use the tidyverse you can use the functions
# scale_x_continuous and scale_y_continuous by using
# the argument transform (nowdays trans is deprecated) where you can try the option "log10"
## Check out https://ggplot2.tidyverse.org/reference/scale_continuous.html for more information
## and some examples
bike_sales_p_q_frame |> 
  ggplot() + 
  geom_point(aes(x = price, y = quantity,
                 color = frame)) +
  scale_x_continuous(labels = label_dollar(), 
                     transform = "log10") +
  scale_y_continuous(transform = "log10") +
  labs(x = "Price (US Dollars) - Logarithmic Base 10 scale",
       y = "Quantity (units)  - Logarithmic Base 10 scale",
       color = "Frame",
       title = "Relation between price and units sale")
```

## Relation between categorical variables

Use the available functions from the `tidyverse` to create a simple scatterplot between `frame` and `category.secondary`

Also with this kind of plot you can identify the [product gap](https://en.wikipedia.org/wiki/Gap_analysis) in relation to potential products that are not offer

```{r}
# When using the tidyverse use ggplot, geom_point,
# labs
## In the position argument don't forget to use 
## position_jitter
### Check out https://ggplot2.tidyverse.org/reference/position_jitter.html  for more information
## and some examples

bike_sales_frame_cat2 <- bike_sales |> 
  select(frame, category.secondary)

bike_sales_frame_cat2 |> 
  ggplot() +
  geom_point(aes(x = frame, y = category.secondary),
             position = position_jitter(width = 0.2,
                                        height = 0.2)) +
  labs(x = "Frame material",
       y = "Secondary Category",
       title = "Identifying product gap")
```

## Descriptive statistics by group

Add some text pointing out the principal findings as a result of generating the descriptive statistics by group.

### Mean, median and standard deviation for revenue by `(category.secondary, frame)`

Calculate the mean, median and standard deviation for revenue by `category.secondary` and `frame` to understand the behavior of this variable by these categories.

In that way you can identify new products that will be appropriate to be launch by the company taking into account the products that are already offered.

```{r}
#| message: false

# You can use the functions group_by and
# summarise
## For more information check out 
## https://dplyr.tidyverse.org/reference/summarise.html
### Also explore the argument .groups from summarise
### and use in connection with the function arrange plus
### desc to order the resulting table by the mean or the
### median
#### For more information check out 
#### https://dplyr.tidyverse.org/reference/arrange.html
#### https://dplyr.tidyverse.org/reference/desc.html
bike_sales_frame_cat2_revenue <- bike_sales |> 
  select(frame, category.secondary, price.ext)

mean_median_sd <- bike_sales_frame_cat2_revenue |> 
  group_by(frame, category.secondary) |> 
  summarise(mean_revenue = mean(price.ext),
            median_revenue = median(price.ext),
            sd_revenue = sd(price.ext)) |> 
  ungroup() |> 
  arrange(desc(median_revenue))

mean_median_sd |> 
  datatable()
```

### Percentage of total revenue generated by `(category.secondary, frame)`

Calculate the total revenue by `category.secondary` and `frame`. Use this information to specify the percentage of total revenue generated by `category.secondary` and `frame`

In that way you can identify if the total revenue generated by the company is distributed in an homogeneous way by `category.secondary` and `frame`

```{r}
#| message: false

# Attack the problem in the following way
## Group the data by category.secondary and frame
## Calculate the total revenue using summarise and 
## sum
### Don't forget to check out the argument .groups
### in summarise
## Use mutate to calculate the percentage of total 
## revenue by category.secondary and frame
### Arrange the data in descending order using arrange
### and desc
#### For more information check out 
#### https://dplyr.tidyverse.org/reference/arrange.html
#### https://dplyr.tidyverse.org/reference/desc.html

pct_revenue <- bike_sales_frame_cat2_revenue |> 
  group_by(frame, category.secondary) |> 
  summarise(total_revenue = sum(price.ext)) |> 
  ungroup() |> 
  mutate(pct_total_revenue = (total_revenue / sum(total_revenue))*100) |> 
  arrange(desc(pct_total_revenue))
  
pct_revenue |> 
  datatable()
```

### Mean, median and standard deviation for revenue by `bikeshop.name`

Calculate the mean, median and standard deviation for revenue by `bikeshop.name` to understand the behavior of this variable by this category.

In that way you can understand the clients of the company and use this information to build a segmentation clustering model.

```{r}
# You can use the functions group_by and
# summarise
## For more information check out 
## https://dplyr.tidyverse.org/reference/summarise.html
### Also explore the argument .groups from summarise
### and use in connection with the function arrange plus
### desc to order the resulting table by the mean or the
### median
#### For more information check out 
#### https://dplyr.tidyverse.org/reference/arrange.html
#### https://dplyr.tidyverse.org/reference/desc.html

bike_sales_bikeshop_revenue <- bike_sales |> 
  select(bikeshop.name, price.ext)

mean_median_sd_bikeshop <- bike_sales_bikeshop_revenue |> 
  group_by(bikeshop.name) |> 
  summarise(mean_revenue = mean(price.ext),
            median_revenue = median(price.ext),
            sd_revenue = sd(price.ext)) |> 
  ungroup() |> 
  arrange(desc(median_revenue))

mean_median_sd_bikeshop |> 
  datatable()
```

### Percentage of total revenue generated by each `bikeshop.name`

Calculate the total revenue by `bikeshop.name`. Use this information to specify the percentage of total revenue generated by `bikeshop.name`

In that way you can identify if it make sense to build a segmentation clustering model by inspecting if the total revenue generated by the company is distributed in an heterogeneous way by `bikeshop.name`

```{r}
# Attack the problem in the following way
## Group the data by bikeshop.name
## Calculate the total revenue using summarise and 
## sum
### Don't forget to check out the argument .groups
### in summarise
## Use mutate to calculate the percentage of total 
## revenue by bikeshop.name
### Arrange the data in descending order using arrange
### and desc
#### For more information check out 
#### https://dplyr.tidyverse.org/reference/arrange.html
#### https://dplyr.tidyverse.org/reference/desc.html

pct_revenue_bikeshop <- bike_sales_bikeshop_revenue |> 
  group_by(bikeshop.name) |> 
  summarise(total_revenue = sum(price.ext)) |> 
  ungroup() |> 
  mutate(pct_total_revenue = (total_revenue / sum(total_revenue))*100) |> 
  arrange(desc(pct_total_revenue))

pct_revenue_bikeshop |> 
  datatable()
```

## Statistical tests

### Testing group frequencies: `chisq.test()`

Inspect, using an statistical test, if the total revenue is distributed in a homogeneous way by `category.secondary` and `frame` using a $\chi^2$ test for a given vector of probabilities.

Taking into account that there are 13 available models offer by the corporation use $p_i = \frac{1}{13}$ for $i = 1, 2, \ldots, 13$ in the $\chi^2$ test

Once you apply the test point out your conclusion taking into account the p-value of the test

```{r}
# To attack the problem you need to really understand 
# the chi squared test for given probabilities

## First, prepare the data in a similar or in the following
## way
### table_category_secondary_frame <- bike_sales |>
###   group_by(category.secondary, frame) |>
###   summarise(total_revenue = sum(price.ext),
###             .groups = "drop") |>
###   mutate(total_revenue_pct = (total_revenue / sum(total_revenue))*100) |>
###   arrange(desc(total_revenue_pct))

## Second, create a new variable to identify
## the models in a similar or in the following way
### table_models <- table_category_secondary_frame |> 
###  mutate(model = str_c(category.secondary, frame, sep = " ")) |> 
###  select(model, total_revenue)
#### For more information about str_c check out the examples in
#### https://stringr.tidyverse.org/reference/str_c.html

## Third, create a named vector to apply the chi test
## taking into account what is mention in ?chisq.test
## in the section related to the Examples and the part
## about Testing for population probabilities
### To create a named vector check out the deframe
### function from the tidyverse
#### https://tibble.tidyverse.org/reference/enframe.html
##### deframe(table_models)

## Fourth, apply the chi squared test
### deframe(table_models) |> 
###  chisq.test(p = rep.int(x = 1/13, times = 13))
#### rep.int(x = 1/13, times = 13) is just a way
#### to repeat 1/13 thirteen times
##### Check out ?rep.int to understand it

## Fifth, use the tidymodels library:
## library(tidymodels) using tidy
### Remember to load the library in the first code 
### chunk: library(tidymodels)
#### For more information check out
#### https://broom.tidymodels.org/reference/tidy.htest.html
##### deframe(table_models) |> 
#####  chisq.test(p = rep.int(x = 1/13, times = 13)) |> 
#####  tidy()
table_models <- pct_revenue |> 
  mutate(model = str_c(frame, category.secondary, 
                       sep = " ")) |> 
  select(model, total_revenue)

chiq_test_proportion_model <- table_models |> 
  deframe() |> 
  chisq.test(p = rep.int(x = 1/13, times = 13),
             correct = FALSE) |> 
  tidy()

chiq_test_proportion_model |> 
  datatable()
```

Inspect, using an statistical test, if the total revenue is distributed in a homogeneous way by `bikeshop.name` using a $\chi^2$ test for a given vector of probabilities.

Taking into account that there are 30 bike shops offer use $p_i = \frac{1}{30}$ for $i = 1, 2, \ldots, 30$ in the $\chi^2$ test

Once you apply the test point out your conclusion taking into account the p-value of the test

```{r}
# Apply a similar process as in the case of
# applying the chi squared test for 
# category.secondary and frame in relation to
# the total revenue
## See the comments in that section for more 
## information about how to apply the test
table_bikeshops <- pct_revenue_bikeshop |> 
  select(bikeshop.name, total_revenue)

chiq_test_proportion_bikeshop <- table_bikeshops |> 
  deframe() |> 
  chisq.test(correct = FALSE) |> 
  tidy()

chiq_test_proportion_bikeshop |> 
  datatable()
```

### Testing group means: `t.test()`

Inspect, using a two sample t-tests, if the mean revenue between the `Aluminum` and `Carbon` bicycle models are the same in relation to the `frame` variable

Once you apply the test point out your conclusion taking into account the p-value of the test

```{r}
# If you use base R you can apply t.test
## Check out more information in ?t.test
### 
# If you use the tidyverse framework you can 
# use t_test from tidymodels
## For more information check out 
### https://infer.tidymodels.org/reference/t_test.html
```

### Analysis of Variance (ANOVA)

Apply an analysis of variance (ANOVA) using `price` as a response variable

-   First begin with a simple model

    -   `price ~ category.secondary`

-   Then add another variable

    -   `price ~ category.secondary + frame`

-   Expand the model in the following way where you can use the following equivalent expressions

    -   `price ~ category.secondary + frame + category.secondary:frame`
    -   `price ~ category.secondary*frame`[^1]

[^1]: `category.secondary*frame` is a short way to specify all the possible interactions between these 2 categorical variables which is equivalent to `category.secondary + frame + category.secondary:frame`

```{r}
# Use the functions aov and anova from base R
# to apply the analysis of variance (ANOVA)
## As an example you can begin with a simple model
### aov(formula = price ~ category.secondary, 
###    data = bike_sales) |> 
###  anova() |> 
###  tidy()

## Then change the formula argument with the 
## different alternative models
```

Taking into account the analysis of variance, point out if it make sense to add `category.secondary`, `frame` and its interaction to the model.

Depending on the answer to the above question point out if it make sense to try the following model:

-   `price ~ category.secondary*frame*bikeshop.state`[^2]

[^2]: `category.secondary*frame*bikeshop.state` is a way to specify all the possible interactions between these 3 categorical variables. In this case the model will have $2^3 - 1 = 7$ terms
